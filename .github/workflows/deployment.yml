# This is a basic workflow to help you get started with Actions

name: Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: production
    concurrency: production

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
          
      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Check for Changes
        id: file_changes
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E 'webpack.mix.js|package.json|package-lock.json|resources/(?!views/)' ; then
            echo "::set-output name=changes_detected::true"
          fi
  
      - name: Run Production Build
        if: steps.file_changes.outputs.changes_detected == 'true'
        run: npm run production
        
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: LLL
          utcOffset: "+02:00"
      - name: Commit built assets
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -B deploy
          git add -f public/
          git commit -m "Deployment at ${{ steps.current-time.outputs.formattedTime }}" --allow-empty
          git push -f origin deploy
          echo "MESSAGE=Deployment at ${{ steps.current-time.outputs.formattedTime }}" >> $GITHUB_ENV
  deploy:
      needs: build
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      environment: production
      concurrency: production
      steps:
      - name: Deploy to Server using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/public_html
            # activate maintenance mode
            php artisan down
            echo "Server maintenance mode activated"

            # update source code
            git fetch origin
            git reset --hard origin/deploy
            echo "Updates fetched"

            # update PHP dependencies
            export COMPOSER_HOME="$HOME/.config/composer"
            composer2 install --no-interaction --prefer-dist --optimize-autoloader --no-dev
            echo "Composer installed"

            #Refresh caches
            php artisan optimize:clear
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            echo "Cache udpated."

            # update database
            php artisan migrate --force	# --force		Required to run when in production.
            echo "Migrations done"
            # restart queues 
            php artisan -v queue:restart
            echo "Queue restarted"

            # stop maintenance mode
            php artisan up
            echo "Server is active again"
